import org.springframework.boot.gradle.plugin.SpringBootPlugin

group 'io.idempotency'

buildscript {
  ext {
    springBootVersion = '2.1.3.RELEASE'
    spotbugsVersion = '1.6.9'
  }

  repositories {
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }

  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:${spotbugsVersion}"
  }
}

repositories {
  mavenCentral()
}

apply from: "./libraries.gradle"

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'com.github.spotbugs'

dependencyManagement {
  imports {
    mavenBom SpringBootPlugin.BOM_COORDINATES
  }
}

dependencies {
  implementation libraries.aspectjweaver
  implementation libraries.springRabbit
  implementation libraries.springBootStarterJdbc
  implementation libraries.springBootStarterJson
  implementation libraries.springDataRedis
  implementation libraries.lombok
  implementation libraries.jacksonDataBind

  annotationProcessor libraries.lombok

  testImplementation libraries.springBootTest
  testImplementation libraries.junitJupiterApi
  testImplementation libraries.junitJupiterParams
  testImplementation libraries.junitJupiterEngine
  testImplementation libraries.mockitoCore
  testImplementation libraries.mockitoJunitJupiter
  testImplementation libraries.postgresJdbc
  testImplementation libraries.hikariCP
  testImplementation libraries.testContainers
  testImplementation libraries.testContainersPostgres
  testImplementation libraries.awaitility
}

spotbugs { 
  sourceSets = [sourceSets.main] 
  ignoreFailures = false 
  reportsDir = file("${buildDir}/reports/findbugsReports") 
  effort = "max" 
  reportLevel = "high"
}
tasks.withType(com.github.spotbugs.SpotBugsTask) { 
  reports { 
    html { enabled = true 
    }
    xml { 
      enabled = false 
    } 
  } 
}

jacoco {
}

jacocoTestReport {
  executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
  reports {
    xml.enabled = true
    csv.enabled = false
    html.destination file("${buildDir}/reports/jacoco/coverage.html")
    xml.destination file("${buildDir}/reports/jacoco/coverage.xml")
  }
  
  afterEvaluate {
    classDirectories.from = files(classDirectories.files.collect {
      fileTree(dir: it, excludes: ['**/*Config*'])
    })
  }

  dependsOn test
}

check.dependsOn jacocoTestReport

test {
  useJUnitPlatform()
}

task integrationTest(type: Test, dependsOn: test) {
    beforeSuite { descriptor ->
      if (descriptor.className != null) {
        logger.lifecycle("Running: " + descriptor.className)
      }
    }

  include '**/it/**/*'

  reports {
    html.destination = file("$buildDir/reports/integrationTests")
  }
}
check.dependsOn integrationTest


sourceCompatibility = 1.8
targetCompatibility = 1.8

