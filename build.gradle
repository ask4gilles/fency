import org.springframework.boot.gradle.plugin.SpringBootPlugin
apply from: "./libraries.gradle"
group 'io.fency'

buildscript {
  ext {
    springBootVersion = '2.1.3.RELEASE'
    spotbugsVersion = '1.6.9'
  }

  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }

  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:${spotbugsVersion}"
  }
}

allprojects {
  
  version = '0.0.1-SNAPSHOT'
  
  repositories {
    mavenLocal()
    mavenCentral()
  }
  
  apply plugin: 'java'
  apply plugin: 'idea'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'jacoco'
  apply plugin: 'com.github.spotbugs'
  apply plugin: 'maven-publish'

  dependencyManagement {
    imports {
      mavenBom SpringBootPlugin.BOM_COORDINATES
    }
  }

  spotbugs {
    sourceSets = [sourceSets.main]
    ignoreFailures = false
    reportsDir = file("${buildDir}/reports/findbugsReports")
    effort = "max"
    reportLevel = "high"
  }
  tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
      html {
        enabled = true
      }
      xml {
        enabled = false
      }
    }
  }

  jacoco {
  }

  jacocoTestReport {
    executionData fileTree(project.rootDir.absolutePath).include("${buildDir}/jacoco/*.exec")
    reports {
      xml.enabled = true
      csv.enabled = false
      html.destination file("${buildDir}/reports/jacoco/coverage.html")
      xml.destination file("${buildDir}/reports/jacoco/coverage.xml")
    }

    afterEvaluate {
      classDirectories.from = files(classDirectories.files.collect {
        fileTree(dir: it, excludes: ['**/*Configuration*'])
      })
    }

    dependsOn test
  }

  check.dependsOn jacocoTestReport

  test {
    useJUnitPlatform()
  }

  task integrationTest(type: Test, dependsOn: test) {
    beforeSuite {descriptor ->
      if (descriptor.className != null) {
        logger.lifecycle("Running: " + descriptor.className)
      }
    }

    include '**/**/*ItTest'

    reports {
      html.destination = file("$buildDir/reports/integrationTests")
    }
  }
  check.dependsOn integrationTest

  publishing {
    publications {
      mavenJava(MavenPublication) {
        from components.java
      }
    }
    repositories {
      mavenLocal()
    }
  }
  sourceCompatibility = 1.8
  targetCompatibility = 1.8
}